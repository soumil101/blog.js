{{! Use the main layout }}
{{!< main }}

<section class="content-container">
    {{#if loggedIn}}
        <!-- Create Post Form on the Left -->
        <section class="content-left">
            <h2>Create a Post</h2>
            <form action="/posts" method="POST">
                <label for="title">Title:</label>
                <input type="text" id="title" name="title" required>
                <label for="content">Content:</label>
                <textarea id="content" name="content" required></textarea>
                <label for="tag">Tag:</label>
                <input type="text" id="tag" name="tag">
                <div class="form-actions">
                    <button type="button" class="emoji-button" onclick="toggleEmojiPanel()">ðŸ˜€</button>
                    <button type="submit" class="post-button">Post</button>
                </div>
            </form>

            <div id="emoji-container" class="emoji-panel" style="display: none;">
                <input type="text" id="emoji-search" placeholder="Search emojis..." oninput="searchEmojis()">
                <div id="emoji-grid"></div>
            </div>
        </section>
    {{/if}}

    <!-- Recent Posts on the Right -->
    <section class="content-right">
        <h2>Recent Posts</h2>
        <div class="filter-container">
            <div class="sort-button-container">
                <label for="sortPosts">Sort by:</label>
                <select id="sortPosts" onchange="sortPosts()">
                    <option value="recency">Recency</option>
                    <option value="likes">Number of Likes</option>
                </select>
            </div>
            <div class="tag-filter-container">
                <label for="filterTags">Filter by tags:</label>
                <input type="text" id="filterTags" placeholder="Enter tags" oninput="filterPostsByTags()">
            </div>
        </div>

        <div id="posts-list" data-html="{{{postsHtml}}}">
            {{#if posts.length}}
                <ul>
                    {{#each posts}}
                        {{> post this user=../user}}
                    {{/each}}
                </ul>
            {{else}}
                <p>No posts available.</p>
            {{/if}}
        </div>
    </section>
</section>

{{! JavaScript for Emoji Integration, Sorting, and Tag Filtering }}
<script src="https://cdn.jsdelivr.net/npm/fuse.js/dist/fuse.min.js"></script>
<script>
    let allEmojis = [];  // Global list to hold all emojis
    let allPosts = [];   // Global list to hold all posts for filtering

    function toggleEmojiPanel() {
        const container = document.getElementById('emoji-container');
        container.style.display = container.style.display === 'none' ? 'block' : 'none';

        if (container.style.display === 'block' && allEmojis.length === 0) {
            fetchEmojis();
        }
    }

    function fetchEmojis() {
        fetch('https://emoji-api.com/emojis?access_key=5b02b506d90b9bc848dc7f077f3d213ccb76a360')
            .then(response => response.json())
            .then(data => {
                allEmojis = data;
                displayEmojis(allEmojis);
            })
            .catch(error => {
                console.error('Error fetching emojis:', error);
            });
    }

    function displayEmojis(emojis, limit = 200) {
        const container = document.getElementById('emoji-grid');
        container.innerHTML = '';  // Clear previous results
        if (Array.isArray(emojis) && emojis.length > 0) {
            emojis.slice(0, limit).forEach(emoji => {
                const emojiElement = document.createElement('span');
                emojiElement.textContent = emoji.character;
                emojiElement.title = emoji.slug;  // Showing the emoji name on hover
                emojiElement.style.cursor = 'pointer';
                emojiElement.onclick = () => insertEmoji(emoji.character);
                container.appendChild(emojiElement);
            });
        } else {
            container.textContent = 'No emojis found. Try a different search!';
        }
    }

    function searchEmojis() {
        const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
        const filteredEmojis = allEmojis.filter(emoji => 
            emoji.slug.includes(searchTerm) || emoji.character.includes(searchTerm)
        );
        displayEmojis(filteredEmojis);
    }

    function insertEmoji(emoji) {
        const textarea = document.getElementById('content');
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const text = textarea.value;

        textarea.value = text.slice(0, start) + emoji + text.slice(end);
        textarea.selectionStart = textarea.selectionEnd = start + emoji.length;
        textarea.focus();
    }

    function sortPosts() {
        const sortBy = document.getElementById('sortPosts').value;
        fetch(`/sortPosts?sortBy=${sortBy}`)
            .then(response => response.json())
            .then(data => {
                const postsList = document.getElementById('posts-list');
                postsList.innerHTML = data.html;
                allPosts = data.posts; // Store all posts for filtering
                postsList.setAttribute('data-html', data.html); // Store the HTML for all posts
            })
            .catch(error => {
                console.error('Error sorting posts:', error);
            });
    }

    function filterPostsByTags() {
        const filterTags = document.getElementById('filterTags').value.trim().toLowerCase();
        const postsList = document.getElementById('posts-list');
        if (filterTags === '') {
            postsList.innerHTML = postsList.getAttribute('data-html'); // Reset to all posts if search field is empty
            return;
        }

        const fuse = new Fuse(allPosts, {
            keys: ['tag'], // Only search by the tag
            threshold: 0.3 // Adjust the threshold for fuzzy search as needed
        });

        const result = fuse.search(filterTags);
        const filteredPosts = result.map(res => res.item);

        if (filteredPosts.length > 0) {
            const filteredHtml = filteredPosts.map(post => `
                <div class="post">
                    <div class="post-avatar">
                        <img src="${post.avatar_url ? post.avatar_url : '/avatar/' + post.username}" alt="${post.username}'s avatar">
                    </div>
                    <div class="post-content preserve-newlines">
                        <h2>${post.title}</h2>
                        <p>${post.content}</p>
                        <p>Posted by <strong>${post.username}</strong> on <em>${post.timestamp}</em></p>
                        <p>Tags: <span class="tag">${post.tag}</span></p>
                        <div class="post-status-bar">
                            <button data-id="${post.id}" class="like-button" onclick="handleLikeClick(event)">
                                <i class="fas fa-heart"></i>
                                <span class="likes-count">${post.likes}</span>
                            </button>
                            ${post.username === "${user.username}" ? `
                            <button data-id="${post.id}" class="delete-button" onclick="handleDeleteClick(event)">
                                <i class="fas fa-trash-alt"></i>
                            </button>` : ''}
                        </div>
                        <div class="comments-section">
                            ${post.comments.map(comment => `
                                <div class="comment">
                                    <p><strong>${comment.username}</strong> commented on <em>${comment.timestamp}</em></p>
                                    <p>${comment.content}</p>
                                </div>
                            `).join('')}
                        </div>
                        <div class="comment-form">
                            <form action="/comment" method="post">
                                <input type="hidden" name="post_id" value="${post.id}">
                                <textarea name="content" placeholder="Write a comment..." required></textarea>
                                <button type="submit">Comment</button>
                            </form>
                        </div>
                    </div>
                </div>
            `).join('');
            postsList.innerHTML = filteredHtml;
        } else {
            postsList.innerHTML = '<p>No posts available.</p>';
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        // Fetch all posts initially for filtering
        sortPosts();
    });
</script>
